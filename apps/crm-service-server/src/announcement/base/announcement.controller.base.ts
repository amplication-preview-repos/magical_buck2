/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnnouncementService } from "../announcement.service";
import { AnnouncementCreateInput } from "./AnnouncementCreateInput";
import { Announcement } from "./Announcement";
import { AnnouncementFindManyArgs } from "./AnnouncementFindManyArgs";
import { AnnouncementWhereUniqueInput } from "./AnnouncementWhereUniqueInput";
import { AnnouncementUpdateInput } from "./AnnouncementUpdateInput";

export class AnnouncementControllerBase {
  constructor(protected readonly service: AnnouncementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Announcement })
  async createAnnouncement(
    @common.Body() data: AnnouncementCreateInput
  ): Promise<Announcement> {
    return await this.service.createAnnouncement({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Announcement] })
  @ApiNestedQuery(AnnouncementFindManyArgs)
  async announcements(@common.Req() request: Request): Promise<Announcement[]> {
    const args = plainToClass(AnnouncementFindManyArgs, request.query);
    return this.service.announcements({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Announcement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async announcement(
    @common.Param() params: AnnouncementWhereUniqueInput
  ): Promise<Announcement | null> {
    const result = await this.service.announcement({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Announcement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnnouncement(
    @common.Param() params: AnnouncementWhereUniqueInput,
    @common.Body() data: AnnouncementUpdateInput
  ): Promise<Announcement | null> {
    try {
      return await this.service.updateAnnouncement({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Announcement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnnouncement(
    @common.Param() params: AnnouncementWhereUniqueInput
  ): Promise<Announcement | null> {
    try {
      return await this.service.deleteAnnouncement({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
