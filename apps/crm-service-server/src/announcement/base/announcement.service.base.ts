/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Announcement as PrismaAnnouncement } from "@prisma/client";

export class AnnouncementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnnouncementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.announcement.count(args);
  }

  async announcements(
    args: Prisma.AnnouncementFindManyArgs
  ): Promise<PrismaAnnouncement[]> {
    return this.prisma.announcement.findMany(args);
  }
  async announcement(
    args: Prisma.AnnouncementFindUniqueArgs
  ): Promise<PrismaAnnouncement | null> {
    return this.prisma.announcement.findUnique(args);
  }
  async createAnnouncement(
    args: Prisma.AnnouncementCreateArgs
  ): Promise<PrismaAnnouncement> {
    return this.prisma.announcement.create(args);
  }
  async updateAnnouncement(
    args: Prisma.AnnouncementUpdateArgs
  ): Promise<PrismaAnnouncement> {
    return this.prisma.announcement.update(args);
  }
  async deleteAnnouncement(
    args: Prisma.AnnouncementDeleteArgs
  ): Promise<PrismaAnnouncement> {
    return this.prisma.announcement.delete(args);
  }
}
